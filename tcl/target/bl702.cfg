# SPDX-License-Identifier: GPL-2.0-or-later

#
# Bouffalo Labs BL702, BL704 and BL706 target
#
# https://en.bouffalolab.com/product/?type=detail&id=8
#
# Default JTAG pins: (if not changed by eFuse configuration)
# TMS - GPIO0
# TDI - GPIO1
# TCK - GPIO2
# TDO - GPIO9
#

source [find mem_helper.tcl]

transport select jtag

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME bl702
}

jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x20000e05

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME riscv -chain-position $_TARGETNAME

riscv set_mem_access sysbus

# For work-area we use DTCM instead of ITCM, due ITCM is used as buffer for L1 cache and XIP
$_TARGETNAME configure -work-area-phys 0x22014000 -work-area-size 0xC000 -work-area-backup 1

# Internal RC ticks on 32 MHz, so this speed should be safe to use.
adapter speed 8000

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME bl602_flash 0x23000000 0 0 0 $_TARGETNAME

$_TARGETNAME configure -event reset-init {
	# Probing of Flash is required to initialize SFlash from unknown state.
	flash probe 0
}

# Debug Module's ndmreset resets only Trust Zone Controller, so we need to do SW reset instead.
# CTRL_PWRON_RESET triggers full "power-on like" reset.
# This means that pinmux configuration to access JTAG is reset as well, and configured back early
# in BootROM. Since we will lose JTAG access, and RISC-V Debug Module is (most likely) reset too,
# we can override default assert_reset C function behavior, perform full SW reset
# and let OpenOCD re-attach again.
$_TARGETNAME configure -event reset-assert {
	halt

	# Switch clock to internal RC32M
 	# In HBN_GLB, set ROOT_CLK_SEL = 0
 	mmw 0x4000f030 0x0 0x00000003
 	# Wait for clock switch
 	sleep 10

 	# GLB_REG_BCLK_DIS_FALSE
 	mww 0x40000ffc 0x0

 	# HCLK is RC32M, so BCLK/HCLK doesn't need divider
 	# In GLB_CLK_CFG0, set BCLK_DIV = 0 and HCLK_DIV = 0
 	mmw 0x40000000 0x0 0x00FFFF00
 	# Wait for clock to stabilize
 	sleep 10

	# We need to trigger the final sw reset by few instructions, because both
	# progbuf and sysbus mem access complains about that it cannot get
	# status if the write was successful or not, since chip is already reset.
	# Since this chip does not support abstract access, this is the only option.

 	## In GLB_SWRST_CFG2, clear CTRL_SYS_RESET, CTRL_CPU_RESET and CTRL_PWRON_RESET
	# lw t1, 0(a1)            # Load the value from the address in a1 (GLB_SWRST_CFG2) into t1
	# li t2, 0xFFFFFFF8       # Load the mask value of 0x7 (bitfields) into t2
	# and t1, t1, t2          # AND t1 with t2 and store result back in t1
	# sw t1, 0(a1)            # Store the cleared reg value to the address in a1 (GLB_SWRST_CFG2)
 	## In GLB_SWRST_CFG2, set CTRL_SYS_RESET, CTRL_CPU_RESET and CTRL_PWRON_RESET to 1
	# li t1, 0x7              # Load the value 0x7 (bitfields) into t1
	# sw t1, 0(a1)            # Store the value 0x7 to the address in a1 (GLB_SWRST_CFG2)
	reg a1 0x40000018
	reg pc 0x22014000
	# We put those instructions into DTCM, in case ITCM is already used by L1C
	write_memory 0x22014000 32 { 0x0005a303 0xff800393 0x00737333 0x0065a023 0x00700313 0x0065a023 }

	# Let CPU to execute it and trigger full sw reset
	resume
}
